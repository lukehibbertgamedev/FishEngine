
Future Todo:
	- Fix the Vulkan API, somehow the configurator thinks you have version 1.2 something. But I installed the 1.3.283 SDK, so? 
		The init_vulkan() require_api_version(1, 3) currently does not work because of it, same with physical device selector.
		I changed this to be desire_api_version and it works for now. This may cause issues.

		This may be fixed by copying these 3 files (https://github.com/charles-lunarg/vk-bootstrap/tree/main/src) into third_party/vkbootstrap/

	- Validation error in console (related to the vulkan api version)
		
		[ERROR: Validation]
		Validation Error: [ VUID-VkDeviceCreateInfo-pNext-pNext ] Object 0: handle = 0x1f4f2164b20, type = VK_OBJECT_TYPE_INSTANCE; 
		| MessageID = 0x901f59ec | vkCreateDevice(): pCreateInfo->pNext includes a pointer to a VkStructureType 
		(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES) which was added in VK_API_VERSION_1_3 but the current effective API
		version is 1.2.155 (0x0040209b). The Vulkan spec states: Each pNext member of any structure (including this one) in the pNext
		chain must be either NULL or a pointer to a valid struct for extending VkDeviceCreateInfo 
		(https://vulkan.lunarg.com/doc/view/1.3.283.0/windows/1.3-extensions/vkspec.html#VUID-VkDeviceCreateInfo-pNext-pNext)

	Once fixed, go over the (https://vkguide.dev/docs/new_chapter_1/vulkan_mainloop_code/) tutorial and change the functions back
	to utilise the use of type2 structures. I replaced them with type structures to get this to work as type2 comes with the 1.3 API.


	Continue to swap shaders

Previously:
	- [X] Recreated a new project using Vulkan and SDL as opposed to Vulkan and GLFW.		05/06
	- [X] Build the cmake files using cmake-gui.											05/06

	- [X] Follow the code walkthrough tutorial of the vulkan guide							07/06

	- [X] Completed chapter 1 of the vulkan guide, initialising vulkan						08/06 *
	- [X] Fix issue from chapter 1 (no entry point for vkQueueSubmit2() found)				08/06
	- [X] Fixed API issue (it cannot be fixed). Driver does not support 1.3					08/06
	- [X] Moved on from all issues, converted to the Legacy Guide and caught up				08/06
	- [X] Set up and load triangle shader completed											08/06
	 
	- [X] Pipeline set up and triangle rendering											14/06
	- [X] Passing colour data through the shader data to render coloured triangle			14/06
	- [X] Refactoring using a deletion queue												14/06
	- [X] Completed chapter 2 of the vulkan guide, the graphics pipeline					14/06 *
	- [X] Updated the Vulkan API to version 1.3												14/06 *
	- [X] Fix the issue regarding VmaAllocator, seems to be using Vk 1.3					14/06

	- [X] Swap between the 3 pipelines defined												14/06
	- [X] Refactor selected shader to be enum												14/06
	- [X] Refactor some code and add comments where needed									14/06
	- [X] Merge this branch into develop and branch off to Feature/Renderer					14/06
	- [X] Implemented spinning triangle with camera position and view matrix				14/06
	- [X] Implemented depth buffer to fix and complete model loading for one model			14/06
 	- [X] Complete chapter 3 of the vulkan guide, drawing meshes							14/06 *
	- [X] Implemented double-buffering														14/06

	- [X] Implemented descriptor sets (including dynamic)									19/06
	- [X] Implemented storage buffers														19/06
	- [X] Complete chapter 4 of the vulkan guide, buffers and shader input/output			19/06 *
	- [X] Implemented memory transfers														19/06
	- [X] Implemented a texture load function												19/06
	- [X] Implemented texture loading and rendering											19/06
	- [X] Complete chapter 5 of the vulkan guide, textures									19/06 *

	- [X] Implement the ImGui section of the vulkan guide									20/06
	- [X] Open the ImGui demo window														20/06


Next time:

	- [ ] Complete extra chapter of the vulkan guide (https://vkguide.dev/docs/extra_chapter)


	- [ ] Read up and review the code surrounding descriptor sets

	- [ ] Complete the exercises from the finale of chapter 3
	- [ ] Add WASD control to the camera (modify matricies in the render function)
	- [ ] Sort the render objects container before rendering by Pipeline and Mesh, reducing number of binds
	- [ ] Clean up all hardcoded pipelines and meshes
	- [ ] Load more meshes

	- [ ] Go through the console window on termination and attempt to clear the validation errors/warnings

	- [ ] Refactor all code to abstract certain features. i.e. resource management singleton
	- [ ] Refactor all code to match the 1.3 support for Vulkan