
Future Todo:
	
	- [ ] Optimise the cube primitive rendering (currently 24 vertices, should really only be 8)
	- [ ] Fix the rotation origin point for each render object (currently not around the origin)
	- [ ] Privatise unnecessary variables and provide const correct accessors
	- [ ] Define an error code and proper logging for Fish (i.e. FISH_ERROR, FISH_WARN, FISH_FATAL, FISH_LOG) potentially coloured in the console
	- [ ] Begin implementing the 1.3 API as our currently implementation uses outdated code
	- [ ] Create new folders for different parts (i.e. Backend, Core, Ecs) 

Previously:

	-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 

	- [X] Recreated a new project using Vulkan and SDL as opposed to Vulkan and GLFW.		05/06
	- [X] Build the cmake files using cmake-gui.											05/06

	- [X] Follow the code walkthrough tutorial of the vulkan guide							07/06

	- [X] Completed chapter 1 of the vulkan guide, initialising vulkan						08/06 *
	- [X] Fix issue from chapter 1 (no entry point for vkQueueSubmit2() found)				08/06
	- [X] Fixed API issue (it cannot be fixed). Driver does not support 1.3					08/06
	- [X] Moved on from all issues, converted to the Legacy Guide and caught up				08/06
	- [X] Set up and load triangle shader completed											08/06
	 
	- [X] Pipeline set up and triangle rendering											14/06
	- [X] Passing colour data through the shader data to render coloured triangle			14/06
	- [X] Refactoring using a deletion queue												14/06
	- [X] Completed chapter 2 of the vulkan guide, the graphics pipeline					14/06 *
	- [X] Updated the Vulkan API to version 1.3												14/06 *
	- [X] Fix the issue regarding VmaAllocator, seems to be using Vk 1.3					14/06

	- [X] Swap between the 3 pipelines defined												14/06
	- [X] Refactor selected shader to be enum												14/06
	- [X] Refactor some code and add comments where needed									14/06
	- [X] Merge this branch into develop and branch off to Feature/Renderer					14/06
	- [X] Implemented spinning triangle with camera position and view matrix				14/06
	- [X] Implemented depth buffer to fix and complete model loading for one model			14/06
 	- [X] Complete chapter 3 of the vulkan guide, drawing meshes							14/06 *
	- [X] Implemented double-buffering														14/06

	- [X] Implemented descriptor sets (including dynamic)									19/06
	- [X] Implemented storage buffers														19/06
	- [X] Complete chapter 4 of the vulkan guide, buffers and shader input/output			19/06 *
	- [X] Implemented memory transfers														19/06
	- [X] Implemented a texture load function												19/06
	- [X] Implemented texture loading and rendering											19/06
	- [X] Complete chapter 5 of the vulkan guide, textures									19/06 *

	- [X] Implement the ImGui section of the vulkan guide									20/06 *
	- [X] Open the ImGui demo window														20/06
	- [X] Custom ImGui window with timer metrics											20/06
	- [X] Refactor engine to use resource manager and scenes								20/06

	- [X] Added WASD/QE control to the camera												22/06 *
	- [X] Further abstracted vk_engine.h separating gpu data and pipeline builder			22/06

	- [X] Added toggle for the camera mouse motion											23/06
	- [X] Hardcoded runtime movement for the horse model									23/06
	- [X] Modify horse at runtime (position, rotation, scale)								23/06
	- [X] Quad primitive rendering															23/06

	-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 

	- [X] Cube primitive rendering															01/07

	- [X] Attempted listing all scene objects and modifying them at runtime	(failed)		07/07

	- [X] Objects listed in ImGui and modified at runtime									15/07
	- [X] Implemented the codebase for use of the entity component system					15/07 *

	- [X] Implemented the (broken) initialisation code for basic entity component systems	17/07

	- [X] Refactored to Chapter 2 of the new 1.3 API										20/07

	- [X] Refactored half of Chapter 2 of the new 1.3 API									21/07

	-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 

	- [X] Reviewed the code after a month long break.										27/08	
	- [X] Refactored the rest of Chapter 2 of the new 1.3 API								27/08
	- [X] Editable push constants/background effects via ImGui								27/08

	- [X] Implemented graphics pipeline														28/08
	- [X] Implemented mesh buffers to load triangle and rectangle							28/08
	- [X] Load GLTF mesh from file															28/08

Next time:

	- [ ] Begin chapter 3

	- [ ] We want to take a step back here, we don't entirely want to work on the scene and ECS if we
	- [ ] don't have a stable framework to build upon. We need the Vulkan 1.3 features to really begin understanding
	- [ ] our future changes. Our main priority right now is to complete the 1.3 refactor and only once that is stable, we can 
	- [ ] merge our changes back into the development branch and branch off into a specified ecs branch to work on these changes.

	- [ ] Come back to Improving the render loop chapter in the new API (the last bit of it) with changing create swapchain

	- [!!!!] Refactor to use Vulkan API 1.3, stabilise the branch, merge to dev, create a scenes branch

	- [ ] Pause work on the ECS until the 1.3 work has been completed, things will change a lot in this time

	- [ ] Refactor all code to match the 1.3 support for Vulkan

	- [ ] Begin refactoring current code to reflect the ECS demo (have current scene objects fall to gravity)

	- [ ] Implement the new scene button functionality
	
	- [ ] Implement the save scene button functionality
	
	- [ ] Implement the load scene button functionality

	- [ ] Implement a framework class that refactors the way our engine is loaded (similar to ACL/Tyro)
	`-> Included in this is to refactor the vk_engine class to a fish_vulkan_backend class with classes for individual components.


	- [ ] Render several different models using different textures (see https://kylehalladay.com/blog/tutorial/vulkan/2018/01/28/Textue-Arrays-Vulkan.html)

	- [ ] Sort the render objects container before rendering by Pipeline and Mesh, reducing number of binds (see Chpt 3)

	- [ ] Go through the console window on termination and attempt to clear the validation errors/warnings
